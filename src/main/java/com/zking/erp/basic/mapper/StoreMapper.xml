<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zking.erp.basic.mapper.StoreMapper" >
  <resultMap id="BaseResultMap" type="com.zking.erp.basic.model.Store" >
    <constructor >
      <idArg column="UUID" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="NAME" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="EMPUUID" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="address" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    UUID, NAME, EMPUUID,address
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from store
    where UUID = #{uuid,jdbcType=VARCHAR}
  </select>
  <select id="queryStoreLikePager" resultType="com.zking.erp.basic.model.Store"
          parameterType="com.zking.erp.basic.model.Store">
    SELECT
    <include refid="Base_Column_List"/>
    from store where 1=1
    <if test="null!=name and ''!=name">
      and name like concat(concat('%',#{name}),'%')
    </if>
    <if test="null!=address and ''!=address">
      and address like concat(concat('%',#{address}),'%')
    </if>
    <if test="null!=empuuid and ''!=empuuid">
      and empuuid like concat(concat('%',#{empuuid}),'%')
    </if>
  </select>
    <select id="queryGoodsStore" resultType="map" parameterType="com.zking.erp.basic.vo.StoreVo">
      SELECT g.*,sd.`STOREUUID`,sd.num,sg.supplieruuid FROM storedetail sd,goods g,store s,supplier_goods sg WHERE
      s.uuid=sd.storeuuid AND sg.goodsuuid=g.uuid AND sg.supplieruuid=#{supplierid} and g.uuid=#{goodsuuid}
      GROUP BY g.uuid
    </select>
  <select id="queryStoreGoodsSupplier" resultType="map">
    SELECT s.uuid AS storeuuid,s.name AS storename,g.uuid,g.name,g.outprice,sd.num as inventory FROM store s,storedetail sd,goods g WHERE
    s.uuid=sd.storeuuid AND sd.goodsuuid=g.uuid AND s.uuid=#{supplierid}
    <if test="goodsuuid!=null and ''!=goodsuuid">
      and g.uuid=#{goodsuuid}
    </if>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from store
    where UUID = #{uuid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.zking.erp.basic.model.Store" >
    insert into store (UUID, NAME, EMPUUID,address
      )
    values (#{uuid,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{empuuid,jdbcType=VARCHAR},#{address,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zking.erp.basic.model.Store" >
    insert into store
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="uuid != null" >
        UUID,
      </if>
      <if test="name != null" >
        NAME,
      </if>
      <if test="empuuid != null" >
        EMPUUID,
      </if>
      <if test="address != null " >
        address,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="uuid != null" >
        #{uuid,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="empuuid != null" >
        #{empuuid,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zking.erp.basic.model.Store" >
    update store
    <set >
      <if test="name != null" >
        NAME = #{name,jdbcType=VARCHAR},
      </if>
      <if test="empuuid != null" >
        EMPUUID = #{empuuid,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR}
      </if>
    </set>
    where UUID = #{uuid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zking.erp.basic.model.Store" >
    update store
    set NAME = #{name,jdbcType=VARCHAR},
      EMPUUID = #{empuuid,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR}
    where UUID = #{uuid,jdbcType=VARCHAR}
  </update>
</mapper>